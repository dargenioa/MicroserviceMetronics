{"ast":null,"code":"import { HTTPError } from '../errors/HTTPError.js';\nimport { TimeoutError } from '../errors/TimeoutError.js';\nimport { deepMerge, mergeHeaders } from '../utils/merge.js';\nimport { normalizeRequestMethod, normalizeRetryOptions } from '../utils/normalize.js';\nimport { delay, timeout } from '../utils/time.js';\nimport { maxSafeTimeout, responseTypes, stop, supportsAbortController, supportsFormData, supportsStreams } from './constants.js';\nexport class Ky {\n  // eslint-disable-next-line complexity\n  constructor(input, options = {}) {\n    var _a, _b;\n\n    this._retryCount = 0;\n    this._input = input;\n    this._options = {\n      // TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n      credentials: this._input.credentials || 'same-origin',\n      ...options,\n      headers: mergeHeaders(this._input.headers, options.headers),\n      hooks: deepMerge({\n        beforeRequest: [],\n        beforeRetry: [],\n        afterResponse: []\n      }, options.hooks),\n      method: normalizeRequestMethod((_a = options.method) !== null && _a !== void 0 ? _a : this._input.method),\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      prefixUrl: String(options.prefixUrl || ''),\n      retry: normalizeRetryOptions(options.retry),\n      throwHttpErrors: options.throwHttpErrors !== false,\n      timeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n      fetch: (_b = options.fetch) !== null && _b !== void 0 ? _b : globalThis.fetch.bind(globalThis)\n    };\n\n    if (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n      throw new TypeError('`input` must be a string, URL, or Request');\n    }\n\n    if (this._options.prefixUrl && typeof this._input === 'string') {\n      if (this._input.startsWith('/')) {\n        throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n      }\n\n      if (!this._options.prefixUrl.endsWith('/')) {\n        this._options.prefixUrl += '/';\n      }\n\n      this._input = this._options.prefixUrl + this._input;\n    }\n\n    if (supportsAbortController) {\n      this.abortController = new globalThis.AbortController();\n\n      if (this._options.signal) {\n        this._options.signal.addEventListener('abort', () => {\n          this.abortController.abort();\n        });\n      }\n\n      this._options.signal = this.abortController.signal;\n    }\n\n    this.request = new globalThis.Request(this._input, this._options);\n\n    if (this._options.searchParams) {\n      // eslint-disable-next-line unicorn/prevent-abbreviations\n      const textSearchParams = typeof this._options.searchParams === 'string' ? this._options.searchParams.replace(/^\\?/, '') : new URLSearchParams(this._options.searchParams).toString(); // eslint-disable-next-line unicorn/prevent-abbreviations\n\n      const searchParams = '?' + textSearchParams;\n      const url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams); // To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\n      if ((supportsFormData && this._options.body instanceof globalThis.FormData || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n        this.request.headers.delete('content-type');\n      }\n\n      this.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);\n    }\n\n    if (this._options.json !== undefined) {\n      this._options.body = JSON.stringify(this._options.json);\n      this.request.headers.set('content-type', 'application/json');\n      this.request = new globalThis.Request(this.request, {\n        body: this._options.body\n      });\n    }\n  } // eslint-disable-next-line @typescript-eslint/promise-function-async\n\n\n  static create(input, options) {\n    const ky = new Ky(input, options);\n\n    const fn = async () => {\n      if (ky._options.timeout > maxSafeTimeout) {\n        throw new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n      } // Delay the fetch so that body method shortcuts can set the Accept header\n\n\n      await Promise.resolve();\n      let response = await ky._fetch();\n\n      for (const hook of ky._options.hooks.afterResponse) {\n        // eslint-disable-next-line no-await-in-loop\n        const modifiedResponse = await hook(ky.request, ky._options, ky._decorateResponse(response.clone()));\n\n        if (modifiedResponse instanceof globalThis.Response) {\n          response = modifiedResponse;\n        }\n      }\n\n      ky._decorateResponse(response);\n\n      if (!response.ok && ky._options.throwHttpErrors) {\n        throw new HTTPError(response, ky.request, ky._options);\n      } // If `onDownloadProgress` is passed, it uses the stream API internally\n\n      /* istanbul ignore next */\n\n\n      if (ky._options.onDownloadProgress) {\n        if (typeof ky._options.onDownloadProgress !== 'function') {\n          throw new TypeError('The `onDownloadProgress` option must be a function');\n        }\n\n        if (!supportsStreams) {\n          throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n        }\n\n        return ky._stream(response.clone(), ky._options.onDownloadProgress);\n      }\n\n      return response;\n    };\n\n    const isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n\n    const result = isRetriableMethod ? ky._retry(fn) : fn();\n\n    for (const [type, mimeType] of Object.entries(responseTypes)) {\n      // @ts-expect-error not sure how to properly type this!\n      result[type] = async () => {\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        ky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n        const response = (await result).clone();\n\n        if (type === 'json') {\n          if (response.status === 204) {\n            return '';\n          }\n\n          if (options.parseJson) {\n            return options.parseJson(await response.text());\n          }\n        } // @ts-expect-error not sure how to properly type this!\n\n\n        return response[type]();\n      };\n    }\n\n    return result;\n  }\n\n  _calculateRetryDelay(error) {\n    this._retryCount++;\n\n    if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n      if (error instanceof HTTPError) {\n        if (!this._options.retry.statusCodes.includes(error.response.status)) {\n          return 0;\n        }\n\n        const retryAfter = error.response.headers.get('Retry-After');\n\n        if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n          let after = Number(retryAfter);\n\n          if (Number.isNaN(after)) {\n            after = Date.parse(retryAfter) - Date.now();\n          } else {\n            after *= 1000;\n          }\n\n          if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n            return 0;\n          }\n\n          return after;\n        }\n\n        if (error.response.status === 413) {\n          return 0;\n        }\n      }\n\n      const BACKOFF_FACTOR = 0.3;\n      return BACKOFF_FACTOR * 2 ** (this._retryCount - 1) * 1000;\n    }\n\n    return 0;\n  }\n\n  _decorateResponse(response) {\n    if (this._options.parseJson) {\n      response.json = async () => {\n        return this._options.parseJson(await response.text());\n      };\n    }\n\n    return response;\n  }\n\n  async _retry(fn) {\n    try {\n      return await fn(); // eslint-disable-next-line @typescript-eslint/no-implicit-any-catch\n    } catch (error) {\n      const ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\n      if (ms !== 0 && this._retryCount > 0) {\n        await delay(ms);\n\n        for (const hook of this._options.hooks.beforeRetry) {\n          // @ts-expect-error TODO missing response?\n          // eslint-disable-next-line no-await-in-loop\n          const hookResult = await hook({\n            request: this.request,\n            options: this._options,\n            error,\n            retryCount: this._retryCount\n          }); // If `stop` is returned from the hook, the retry process is stopped\n\n          if (hookResult === stop) {\n            return;\n          }\n        }\n\n        return this._retry(fn);\n      }\n\n      throw error;\n    }\n  }\n\n  async _fetch() {\n    for (const hook of this._options.hooks.beforeRequest) {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await hook(this.request, this._options);\n\n      if (result instanceof Request) {\n        this.request = result;\n        break;\n      }\n\n      if (result instanceof Response) {\n        return result;\n      }\n    }\n\n    if (this._options.timeout === false) {\n      return this._options.fetch(this.request.clone());\n    }\n\n    return timeout(this.request.clone(), this.abortController, this._options);\n  }\n  /* istanbul ignore next */\n\n\n  _stream(response, onDownloadProgress) {\n    const totalBytes = Number(response.headers.get('content-length')) || 0;\n    let transferredBytes = 0;\n    return new globalThis.Response(new globalThis.ReadableStream({\n      async start(controller) {\n        const reader = response.body.getReader();\n\n        if (onDownloadProgress) {\n          onDownloadProgress({\n            percent: 0,\n            transferredBytes: 0,\n            totalBytes\n          }, new Uint8Array());\n        }\n\n        async function read() {\n          const {\n            done,\n            value\n          } = await reader.read();\n\n          if (done) {\n            controller.close();\n            return;\n          }\n\n          if (onDownloadProgress) {\n            transferredBytes += value.byteLength;\n            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n            onDownloadProgress({\n              percent,\n              transferredBytes,\n              totalBytes\n            }, value);\n          }\n\n          controller.enqueue(value);\n          await read();\n        }\n\n        await read();\n      }\n\n    }));\n  }\n\n}","map":{"version":3,"sources":["../../source/core/Ky.ts"],"names":[],"mappings":"AAAA,SAAQ,SAAR,QAAwB,wBAAxB;AACA,SAAQ,YAAR,QAA2B,2BAA3B;AAIA,SAAQ,SAAR,EAAmB,YAAnB,QAAsC,mBAAtC;AACA,SAAQ,sBAAR,EAAgC,qBAAhC,QAA4D,uBAA5D;AACA,SAAQ,KAAR,EAAe,OAAf,QAA6C,kBAA7C;AACA,SAAQ,cAAR,EAAwB,aAAxB,EAAuC,IAAvC,EAA6C,uBAA7C,EAAsE,gBAAtE,EAAwF,eAAxF,QAA8G,gBAA9G;AAEA,OAAM,MAAO,EAAP,CAAS;AAOd;AACA,EAAA,WAAA,CAAY,KAAZ,EAA0B,OAAA,GAAmB,EAA7C,EAA+C;;;AALrC,SAAA,WAAA,GAAc,CAAd;AAMT,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,QAAL,GAAgB;AACf;AACA,MAAA,WAAW,EAAG,KAAK,MAAL,CAAwB,WAAxB,IAAuC,aAFtC;AAGf,SAAG,OAHY;AAIf,MAAA,OAAO,EAAE,YAAY,CAAE,KAAK,MAAL,CAAwB,OAA1B,EAAmC,OAAO,CAAC,OAA3C,CAJN;AAKf,MAAA,KAAK,EAAE,SAAS,CACf;AACC,QAAA,aAAa,EAAE,EADhB;AAEC,QAAA,WAAW,EAAE,EAFd;AAGC,QAAA,aAAa,EAAE;AAHhB,OADe,EAMf,OAAO,CAAC,KANO,CALD;AAaf,MAAA,MAAM,EAAE,sBAAsB,CAAC,CAAA,EAAA,GAAA,OAAO,CAAC,MAAR,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAmB,KAAK,MAAL,CAAwB,MAA5C,CAbf;AAcf;AACA,MAAA,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,SAAR,IAAqB,EAAtB,CAfF;AAgBf,MAAA,KAAK,EAAE,qBAAqB,CAAC,OAAO,CAAC,KAAT,CAhBb;AAiBf,MAAA,eAAe,EAAE,OAAO,CAAC,eAAR,KAA4B,KAjB9B;AAkBf,MAAA,OAAO,EAAE,OAAO,OAAO,CAAC,OAAf,KAA2B,WAA3B,GAAyC,KAAzC,GAAiD,OAAO,CAAC,OAlBnD;AAmBf,MAAA,KAAK,EAAE,CAAA,EAAA,GAAA,OAAO,CAAC,KAAR,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,EAAb,GAAiB,UAAU,CAAC,KAAX,CAAiB,IAAjB,CAAsB,UAAtB;AAnBT,KAAhB;;AAsBA,QAAI,OAAO,KAAK,MAAZ,KAAuB,QAAvB,IAAmC,EAAE,KAAK,MAAL,YAAuB,GAAvB,IAA8B,KAAK,MAAL,YAAuB,UAAU,CAAC,OAAlE,CAAvC,EAAmH;AAClH,YAAM,IAAI,SAAJ,CAAc,2CAAd,CAAN;AACA;;AAED,QAAI,KAAK,QAAL,CAAc,SAAd,IAA2B,OAAO,KAAK,MAAZ,KAAuB,QAAtD,EAAgE;AAC/D,UAAI,KAAK,MAAL,CAAY,UAAZ,CAAuB,GAAvB,CAAJ,EAAiC;AAChC,cAAM,IAAI,KAAJ,CAAU,4DAAV,CAAN;AACA;;AAED,UAAI,CAAC,KAAK,QAAL,CAAc,SAAd,CAAwB,QAAxB,CAAiC,GAAjC,CAAL,EAA4C;AAC3C,aAAK,QAAL,CAAc,SAAd,IAA2B,GAA3B;AACA;;AAED,WAAK,MAAL,GAAc,KAAK,QAAL,CAAc,SAAd,GAA0B,KAAK,MAA7C;AACA;;AAED,QAAI,uBAAJ,EAA6B;AAC5B,WAAK,eAAL,GAAuB,IAAI,UAAU,CAAC,eAAf,EAAvB;;AACA,UAAI,KAAK,QAAL,CAAc,MAAlB,EAA0B;AACzB,aAAK,QAAL,CAAc,MAAd,CAAqB,gBAArB,CAAsC,OAAtC,EAA+C,MAAK;AACnD,eAAK,eAAL,CAAsB,KAAtB;AACA,SAFD;AAGA;;AAED,WAAK,QAAL,CAAc,MAAd,GAAuB,KAAK,eAAL,CAAqB,MAA5C;AACA;;AAED,SAAK,OAAL,GAAe,IAAI,UAAU,CAAC,OAAf,CAAuB,KAAK,MAA5B,EAAmD,KAAK,QAAxD,CAAf;;AAEA,QAAI,KAAK,QAAL,CAAc,YAAlB,EAAgC;AAC/B;AACA,YAAM,gBAAgB,GAAG,OAAO,KAAK,QAAL,CAAc,YAArB,KAAsC,QAAtC,GACxB,KAAK,QAAL,CAAc,YAAd,CAA2B,OAA3B,CAAmC,KAAnC,EAA0C,EAA1C,CADwB,GAExB,IAAI,eAAJ,CAAoB,KAAK,QAAL,CAAc,YAAlC,EAA+E,QAA/E,EAFD,CAF+B,CAK/B;;AACA,YAAM,YAAY,GAAG,MAAM,gBAA3B;AACA,YAAM,GAAG,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,OAAjB,CAAyB,mBAAzB,EAA8C,YAA9C,CAAZ,CAP+B,CAS/B;;AACA,UACC,CAAE,gBAAgB,IAAI,KAAK,QAAL,CAAc,IAAd,YAA8B,UAAU,CAAC,QAA9D,IACD,KAAK,QAAL,CAAc,IAAd,YAA8B,eAD9B,KACkD,EAAE,KAAK,QAAL,CAAc,OAAd,IAA0B,KAAK,QAAL,CAAc,OAAd,CAAiD,cAAjD,CAA5B,CAFnD,EAGE;AACD,aAAK,OAAL,CAAa,OAAb,CAAqB,MAArB,CAA4B,cAA5B;AACA;;AAED,WAAK,OAAL,GAAe,IAAI,UAAU,CAAC,OAAf,CAAuB,IAAI,UAAU,CAAC,OAAf,CAAuB,GAAvB,EAA4B,KAAK,OAAjC,CAAvB,EAAkE,KAAK,QAAvE,CAAf;AACA;;AAED,QAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,SAA3B,EAAsC;AACrC,WAAK,QAAL,CAAc,IAAd,GAAqB,IAAI,CAAC,SAAL,CAAe,KAAK,QAAL,CAAc,IAA7B,CAArB;AACA,WAAK,OAAL,CAAa,OAAb,CAAqB,GAArB,CAAyB,cAAzB,EAAyC,kBAAzC;AACA,WAAK,OAAL,GAAe,IAAI,UAAU,CAAC,OAAf,CAAuB,KAAK,OAA5B,EAAqC;AAAC,QAAA,IAAI,EAAE,KAAK,QAAL,CAAc;AAArB,OAArC,CAAf;AACA;AACD,GAtFa,CAwFd;;;AACa,SAAN,MAAM,CAAC,KAAD,EAAe,OAAf,EAA+B;AAC3C,UAAM,EAAE,GAAG,IAAI,EAAJ,CAAO,KAAP,EAAc,OAAd,CAAX;;AAEA,UAAM,EAAE,GAAG,YAA8B;AACxC,UAAI,EAAE,CAAC,QAAH,CAAY,OAAZ,GAAsB,cAA1B,EAA0C;AACzC,cAAM,IAAI,UAAJ,CAAe,iDAAiD,cAAc,EAA9E,CAAN;AACA,OAHuC,CAKxC;;;AACA,YAAM,OAAO,CAAC,OAAR,EAAN;AACA,UAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,MAAH,EAArB;;AAEA,WAAK,MAAM,IAAX,IAAmB,EAAE,CAAC,QAAH,CAAY,KAAZ,CAAkB,aAArC,EAAoD;AACnD;AACA,cAAM,gBAAgB,GAAG,MAAM,IAAI,CAClC,EAAE,CAAC,OAD+B,EAElC,EAAE,CAAC,QAF+B,EAGlC,EAAE,CAAC,iBAAH,CAAqB,QAAQ,CAAC,KAAT,EAArB,CAHkC,CAAnC;;AAMA,YAAI,gBAAgB,YAAY,UAAU,CAAC,QAA3C,EAAqD;AACpD,UAAA,QAAQ,GAAG,gBAAX;AACA;AACD;;AAED,MAAA,EAAE,CAAC,iBAAH,CAAqB,QAArB;;AAEA,UAAI,CAAC,QAAQ,CAAC,EAAV,IAAgB,EAAE,CAAC,QAAH,CAAY,eAAhC,EAAiD;AAChD,cAAM,IAAI,SAAJ,CAAc,QAAd,EAAwB,EAAE,CAAC,OAA3B,EAAqC,EAAE,CAAC,QAAxC,CAAN;AACA,OA1BuC,CA4BxC;;AACA;;;AACA,UAAI,EAAE,CAAC,QAAH,CAAY,kBAAhB,EAAoC;AACnC,YAAI,OAAO,EAAE,CAAC,QAAH,CAAY,kBAAnB,KAA0C,UAA9C,EAA0D;AACzD,gBAAM,IAAI,SAAJ,CAAc,oDAAd,CAAN;AACA;;AAED,YAAI,CAAC,eAAL,EAAsB;AACrB,gBAAM,IAAI,KAAJ,CAAU,6EAAV,CAAN;AACA;;AAED,eAAO,EAAE,CAAC,OAAH,CAAW,QAAQ,CAAC,KAAT,EAAX,EAA6B,EAAE,CAAC,QAAH,CAAY,kBAAzC,CAAP;AACA;;AAED,aAAO,QAAP;AACA,KA3CD;;AA6CA,UAAM,iBAAiB,GAAG,EAAE,CAAC,QAAH,CAAY,KAAZ,CAAkB,OAAlB,CAA0B,QAA1B,CAAmC,EAAE,CAAC,OAAH,CAAW,MAAX,CAAkB,WAAlB,EAAnC,CAA1B;;AACA,UAAM,MAAM,GAAG,iBAAiB,GAAG,EAAE,CAAC,MAAH,CAAU,EAAV,CAAH,GAAmB,EAAE,EAArD;;AAEA,SAAK,MAAM,CAAC,IAAD,EAAO,QAAP,CAAX,IAA+B,MAAM,CAAC,OAAP,CAAe,aAAf,CAA/B,EAA8D;AAC7D;AACA,MAAA,MAAM,CAAC,IAAD,CAAN,GAAe,YAAW;AACzB;AACA,QAAA,EAAE,CAAC,OAAH,CAAW,OAAX,CAAmB,GAAnB,CAAuB,QAAvB,EAAiC,EAAE,CAAC,OAAH,CAAW,OAAX,CAAmB,GAAnB,CAAuB,QAAvB,KAAoC,QAArE;AAEA,cAAM,QAAQ,GAAI,CAAC,MAAM,MAAP,EAA4B,KAA5B,EAAlB;;AAEA,YAAI,IAAI,KAAK,MAAb,EAAqB;AACpB,cAAI,QAAQ,CAAC,MAAT,KAAoB,GAAxB,EAA6B;AAC5B,mBAAO,EAAP;AACA;;AAED,cAAI,OAAO,CAAC,SAAZ,EAAuB;AACtB,mBAAO,OAAO,CAAC,SAAR,CAAkB,MAAM,QAAQ,CAAC,IAAT,EAAxB,CAAP;AACA;AACD,SAdwB,CAgBzB;;;AACA,eAAO,QAAQ,CAAC,IAAD,CAAR,EAAP;AACA,OAlBD;AAmBA;;AAED,WAAO,MAAP;AACA;;AAES,EAAA,oBAAoB,CAAC,KAAD,EAAa;AAC1C,SAAK,WAAL;;AAEA,QAAI,KAAK,WAAL,GAAmB,KAAK,QAAL,CAAc,KAAd,CAAoB,KAAvC,IAAgD,EAAE,KAAK,YAAY,YAAnB,CAApD,EAAsF;AACrF,UAAI,KAAK,YAAY,SAArB,EAAgC;AAC/B,YAAI,CAAC,KAAK,QAAL,CAAc,KAAd,CAAoB,WAApB,CAAgC,QAAhC,CAAyC,KAAK,CAAC,QAAN,CAAe,MAAxD,CAAL,EAAsE;AACrE,iBAAO,CAAP;AACA;;AAED,cAAM,UAAU,GAAG,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,GAAvB,CAA2B,aAA3B,CAAnB;;AACA,YAAI,UAAU,IAAI,KAAK,QAAL,CAAc,KAAd,CAAoB,gBAApB,CAAqC,QAArC,CAA8C,KAAK,CAAC,QAAN,CAAe,MAA7D,CAAlB,EAAwF;AACvF,cAAI,KAAK,GAAG,MAAM,CAAC,UAAD,CAAlB;;AACA,cAAI,MAAM,CAAC,KAAP,CAAa,KAAb,CAAJ,EAAyB;AACxB,YAAA,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,UAAX,IAAyB,IAAI,CAAC,GAAL,EAAjC;AACA,WAFD,MAEO;AACN,YAAA,KAAK,IAAI,IAAT;AACA;;AAED,cAAI,OAAO,KAAK,QAAL,CAAc,KAAd,CAAoB,aAA3B,KAA6C,WAA7C,IAA4D,KAAK,GAAG,KAAK,QAAL,CAAc,KAAd,CAAoB,aAA5F,EAA2G;AAC1G,mBAAO,CAAP;AACA;;AAED,iBAAO,KAAP;AACA;;AAED,YAAI,KAAK,CAAC,QAAN,CAAe,MAAf,KAA0B,GAA9B,EAAmC;AAClC,iBAAO,CAAP;AACA;AACD;;AAED,YAAM,cAAc,GAAG,GAAvB;AACA,aAAO,cAAc,GAAI,MAAM,KAAK,WAAL,GAAmB,CAAzB,CAAlB,GAAiD,IAAxD;AACA;;AAED,WAAO,CAAP;AACA;;AAES,EAAA,iBAAiB,CAAC,QAAD,EAAmB;AAC7C,QAAI,KAAK,QAAL,CAAc,SAAlB,EAA6B;AAC5B,MAAA,QAAQ,CAAC,IAAT,GAAgB,YAAW;AAC1B,eAAO,KAAK,QAAL,CAAc,SAAd,CAAyB,MAAM,QAAQ,CAAC,IAAT,EAA/B,CAAP;AACA,OAFD;AAGA;;AAED,WAAO,QAAP;AACA;;AAEqB,QAAN,MAAM,CAA2C,EAA3C,EAAgD;AACrE,QAAI;AACH,aAAO,MAAM,EAAE,EAAf,CADG,CAEH;AACA,KAHD,CAGE,OAAO,KAAP,EAAc;AACf,YAAM,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,oBAAL,CAA0B,KAA1B,CAAT,EAA2C,cAA3C,CAAX;;AACA,UAAI,EAAE,KAAK,CAAP,IAAY,KAAK,WAAL,GAAmB,CAAnC,EAAsC;AACrC,cAAM,KAAK,CAAC,EAAD,CAAX;;AAEA,aAAK,MAAM,IAAX,IAAmB,KAAK,QAAL,CAAc,KAAd,CAAoB,WAAvC,EAAoD;AACnD;AACA;AACA,gBAAM,UAAU,GAAG,MAAM,IAAI,CAAC;AAC7B,YAAA,OAAO,EAAE,KAAK,OADe;AAE7B,YAAA,OAAO,EAAG,KAAK,QAFc;AAG7B,YAAA,KAH6B;AAI7B,YAAA,UAAU,EAAE,KAAK;AAJY,WAAD,CAA7B,CAHmD,CAUnD;;AACA,cAAI,UAAU,KAAK,IAAnB,EAAyB;AACxB;AACA;AACD;;AAED,eAAO,KAAK,MAAL,CAAY,EAAZ,CAAP;AACA;;AAED,YAAM,KAAN;AACA;AACD;;AAEqB,QAAN,MAAM,GAAA;AACrB,SAAK,MAAM,IAAX,IAAmB,KAAK,QAAL,CAAc,KAAd,CAAoB,aAAvC,EAAsD;AACrD;AACA,YAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,OAAN,EAAgB,KAAK,QAArB,CAAzB;;AAEA,UAAI,MAAM,YAAY,OAAtB,EAA+B;AAC9B,aAAK,OAAL,GAAe,MAAf;AACA;AACA;;AAED,UAAI,MAAM,YAAY,QAAtB,EAAgC;AAC/B,eAAO,MAAP;AACA;AACD;;AAED,QAAI,KAAK,QAAL,CAAc,OAAd,KAA0B,KAA9B,EAAqC;AACpC,aAAO,KAAK,QAAL,CAAc,KAAd,CAAoB,KAAK,OAAL,CAAa,KAAb,EAApB,CAAP;AACA;;AAED,WAAO,OAAO,CAAC,KAAK,OAAL,CAAa,KAAb,EAAD,EAAuB,KAAK,eAA5B,EAA6C,KAAK,QAAlD,CAAd;AACA;AAED;;;AACU,EAAA,OAAO,CAAC,QAAD,EAAqB,kBAArB,EAAsE;AACtF,UAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,gBAArB,CAAD,CAAN,IAAkD,CAArE;AACA,QAAI,gBAAgB,GAAG,CAAvB;AAEA,WAAO,IAAI,UAAU,CAAC,QAAf,CACN,IAAI,UAAU,CAAC,cAAf,CAA8B;AAC7B,YAAM,KAAN,CAAY,UAAZ,EAAsB;AACrB,cAAM,MAAM,GAAG,QAAQ,CAAC,IAAT,CAAe,SAAf,EAAf;;AAEA,YAAI,kBAAJ,EAAwB;AACvB,UAAA,kBAAkB,CAAC;AAAC,YAAA,OAAO,EAAE,CAAV;AAAa,YAAA,gBAAgB,EAAE,CAA/B;AAAkC,YAAA;AAAlC,WAAD,EAAgD,IAAI,UAAJ,EAAhD,CAAlB;AACA;;AAED,uBAAe,IAAf,GAAmB;AAClB,gBAAM;AAAC,YAAA,IAAD;AAAO,YAAA;AAAP,cAAgB,MAAM,MAAM,CAAC,IAAP,EAA5B;;AACA,cAAI,IAAJ,EAAU;AACT,YAAA,UAAU,CAAC,KAAX;AACA;AACA;;AAED,cAAI,kBAAJ,EAAwB;AACvB,YAAA,gBAAgB,IAAI,KAAM,CAAC,UAA3B;AACA,kBAAM,OAAO,GAAG,UAAU,KAAK,CAAf,GAAmB,CAAnB,GAAuB,gBAAgB,GAAG,UAA1D;AACA,YAAA,kBAAkB,CAAC;AAAC,cAAA,OAAD;AAAU,cAAA,gBAAV;AAA4B,cAAA;AAA5B,aAAD,EAA0C,KAA1C,CAAlB;AACA;;AAED,UAAA,UAAU,CAAC,OAAX,CAAmB,KAAnB;AACA,gBAAM,IAAI,EAAV;AACA;;AAED,cAAM,IAAI,EAAV;AACA;;AA1B4B,KAA9B,CADM,CAAP;AA8BA;;AA9Sa","sourceRoot":"","sourcesContent":["import { HTTPError } from '../errors/HTTPError.js';\nimport { TimeoutError } from '../errors/TimeoutError.js';\nimport { deepMerge, mergeHeaders } from '../utils/merge.js';\nimport { normalizeRequestMethod, normalizeRetryOptions } from '../utils/normalize.js';\nimport { delay, timeout } from '../utils/time.js';\nimport { maxSafeTimeout, responseTypes, stop, supportsAbortController, supportsFormData, supportsStreams } from './constants.js';\nexport class Ky {\n    // eslint-disable-next-line complexity\n    constructor(input, options = {}) {\n        var _a, _b;\n        this._retryCount = 0;\n        this._input = input;\n        this._options = {\n            // TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n            credentials: this._input.credentials || 'same-origin',\n            ...options,\n            headers: mergeHeaders(this._input.headers, options.headers),\n            hooks: deepMerge({\n                beforeRequest: [],\n                beforeRetry: [],\n                afterResponse: []\n            }, options.hooks),\n            method: normalizeRequestMethod((_a = options.method) !== null && _a !== void 0 ? _a : this._input.method),\n            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n            prefixUrl: String(options.prefixUrl || ''),\n            retry: normalizeRetryOptions(options.retry),\n            throwHttpErrors: options.throwHttpErrors !== false,\n            timeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n            fetch: (_b = options.fetch) !== null && _b !== void 0 ? _b : globalThis.fetch.bind(globalThis)\n        };\n        if (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n            throw new TypeError('`input` must be a string, URL, or Request');\n        }\n        if (this._options.prefixUrl && typeof this._input === 'string') {\n            if (this._input.startsWith('/')) {\n                throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n            }\n            if (!this._options.prefixUrl.endsWith('/')) {\n                this._options.prefixUrl += '/';\n            }\n            this._input = this._options.prefixUrl + this._input;\n        }\n        if (supportsAbortController) {\n            this.abortController = new globalThis.AbortController();\n            if (this._options.signal) {\n                this._options.signal.addEventListener('abort', () => {\n                    this.abortController.abort();\n                });\n            }\n            this._options.signal = this.abortController.signal;\n        }\n        this.request = new globalThis.Request(this._input, this._options);\n        if (this._options.searchParams) {\n            // eslint-disable-next-line unicorn/prevent-abbreviations\n            const textSearchParams = typeof this._options.searchParams === 'string' ?\n                this._options.searchParams.replace(/^\\?/, '') :\n                new URLSearchParams(this._options.searchParams).toString();\n            // eslint-disable-next-line unicorn/prevent-abbreviations\n            const searchParams = '?' + textSearchParams;\n            const url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n            // To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n            if (((supportsFormData && this._options.body instanceof globalThis.FormData) ||\n                this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n                this.request.headers.delete('content-type');\n            }\n            this.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);\n        }\n        if (this._options.json !== undefined) {\n            this._options.body = JSON.stringify(this._options.json);\n            this.request.headers.set('content-type', 'application/json');\n            this.request = new globalThis.Request(this.request, { body: this._options.body });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async\n    static create(input, options) {\n        const ky = new Ky(input, options);\n        const fn = async () => {\n            if (ky._options.timeout > maxSafeTimeout) {\n                throw new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n            }\n            // Delay the fetch so that body method shortcuts can set the Accept header\n            await Promise.resolve();\n            let response = await ky._fetch();\n            for (const hook of ky._options.hooks.afterResponse) {\n                // eslint-disable-next-line no-await-in-loop\n                const modifiedResponse = await hook(ky.request, ky._options, ky._decorateResponse(response.clone()));\n                if (modifiedResponse instanceof globalThis.Response) {\n                    response = modifiedResponse;\n                }\n            }\n            ky._decorateResponse(response);\n            if (!response.ok && ky._options.throwHttpErrors) {\n                throw new HTTPError(response, ky.request, ky._options);\n            }\n            // If `onDownloadProgress` is passed, it uses the stream API internally\n            /* istanbul ignore next */\n            if (ky._options.onDownloadProgress) {\n                if (typeof ky._options.onDownloadProgress !== 'function') {\n                    throw new TypeError('The `onDownloadProgress` option must be a function');\n                }\n                if (!supportsStreams) {\n                    throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n                }\n                return ky._stream(response.clone(), ky._options.onDownloadProgress);\n            }\n            return response;\n        };\n        const isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n        const result = isRetriableMethod ? ky._retry(fn) : fn();\n        for (const [type, mimeType] of Object.entries(responseTypes)) {\n            // @ts-expect-error not sure how to properly type this!\n            result[type] = async () => {\n                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n                ky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n                const response = (await result).clone();\n                if (type === 'json') {\n                    if (response.status === 204) {\n                        return '';\n                    }\n                    if (options.parseJson) {\n                        return options.parseJson(await response.text());\n                    }\n                }\n                // @ts-expect-error not sure how to properly type this!\n                return response[type]();\n            };\n        }\n        return result;\n    }\n    _calculateRetryDelay(error) {\n        this._retryCount++;\n        if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n            if (error instanceof HTTPError) {\n                if (!this._options.retry.statusCodes.includes(error.response.status)) {\n                    return 0;\n                }\n                const retryAfter = error.response.headers.get('Retry-After');\n                if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n                    let after = Number(retryAfter);\n                    if (Number.isNaN(after)) {\n                        after = Date.parse(retryAfter) - Date.now();\n                    }\n                    else {\n                        after *= 1000;\n                    }\n                    if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n                        return 0;\n                    }\n                    return after;\n                }\n                if (error.response.status === 413) {\n                    return 0;\n                }\n            }\n            const BACKOFF_FACTOR = 0.3;\n            return BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n        }\n        return 0;\n    }\n    _decorateResponse(response) {\n        if (this._options.parseJson) {\n            response.json = async () => {\n                return this._options.parseJson(await response.text());\n            };\n        }\n        return response;\n    }\n    async _retry(fn) {\n        try {\n            return await fn();\n            // eslint-disable-next-line @typescript-eslint/no-implicit-any-catch\n        }\n        catch (error) {\n            const ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n            if (ms !== 0 && this._retryCount > 0) {\n                await delay(ms);\n                for (const hook of this._options.hooks.beforeRetry) {\n                    // @ts-expect-error TODO missing response?\n                    // eslint-disable-next-line no-await-in-loop\n                    const hookResult = await hook({\n                        request: this.request,\n                        options: this._options,\n                        error,\n                        retryCount: this._retryCount\n                    });\n                    // If `stop` is returned from the hook, the retry process is stopped\n                    if (hookResult === stop) {\n                        return;\n                    }\n                }\n                return this._retry(fn);\n            }\n            throw error;\n        }\n    }\n    async _fetch() {\n        for (const hook of this._options.hooks.beforeRequest) {\n            // eslint-disable-next-line no-await-in-loop\n            const result = await hook(this.request, this._options);\n            if (result instanceof Request) {\n                this.request = result;\n                break;\n            }\n            if (result instanceof Response) {\n                return result;\n            }\n        }\n        if (this._options.timeout === false) {\n            return this._options.fetch(this.request.clone());\n        }\n        return timeout(this.request.clone(), this.abortController, this._options);\n    }\n    /* istanbul ignore next */\n    _stream(response, onDownloadProgress) {\n        const totalBytes = Number(response.headers.get('content-length')) || 0;\n        let transferredBytes = 0;\n        return new globalThis.Response(new globalThis.ReadableStream({\n            async start(controller) {\n                const reader = response.body.getReader();\n                if (onDownloadProgress) {\n                    onDownloadProgress({ percent: 0, transferredBytes: 0, totalBytes }, new Uint8Array());\n                }\n                async function read() {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        controller.close();\n                        return;\n                    }\n                    if (onDownloadProgress) {\n                        transferredBytes += value.byteLength;\n                        const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n                        onDownloadProgress({ percent, transferredBytes, totalBytes }, value);\n                    }\n                    controller.enqueue(value);\n                    await read();\n                }\n                await read();\n            }\n        }));\n    }\n}\n//# sourceMappingURL=Ky.js.map"]},"metadata":{},"sourceType":"module"}