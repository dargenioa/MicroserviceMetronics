{"ast":null,"code":"import { requestMethods } from '../core/constants.js';\nexport const normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\nconst retryAfterStatusCodes = [413, 429, 503];\nconst defaultRetryOptions = {\n  limit: 2,\n  methods: retryMethods,\n  statusCodes: retryStatusCodes,\n  afterStatusCodes: retryAfterStatusCodes,\n  maxRetryAfter: Number.POSITIVE_INFINITY\n};\nexport const normalizeRetryOptions = (retry = {}) => {\n  if (typeof retry === 'number') {\n    return { ...defaultRetryOptions,\n      limit: retry\n    };\n  }\n\n  if (retry.methods && !Array.isArray(retry.methods)) {\n    throw new Error('retry.methods must be an array');\n  }\n\n  if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n    throw new Error('retry.statusCodes must be an array');\n  }\n\n  return { ...defaultRetryOptions,\n    ...retry,\n    afterStatusCodes: retryAfterStatusCodes\n  };\n};","map":{"version":3,"sources":["../../source/utils/normalize.ts"],"names":[],"mappings":"AAAA,SAAQ,cAAR,QAA6B,sBAA7B;AAIA,OAAO,MAAM,sBAAsB,GAAI,KAAD,IACrC,cAAc,CAAC,QAAf,CAAwB,KAAxB,IAA+C,KAAK,CAAC,WAAN,EAA/C,GAAqE,KAD/D;AAGP,MAAM,YAAY,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,QAAvB,EAAiC,SAAjC,EAA4C,OAA5C,CAArB;AAEA,MAAM,gBAAgB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAzB;AAEA,MAAM,qBAAqB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA9B;AAEA,MAAM,mBAAmB,GAA2B;AACnD,EAAA,KAAK,EAAE,CAD4C;AAEnD,EAAA,OAAO,EAAE,YAF0C;AAGnD,EAAA,WAAW,EAAE,gBAHsC;AAInD,EAAA,gBAAgB,EAAE,qBAJiC;AAKnD,EAAA,aAAa,EAAE,MAAM,CAAC;AAL6B,CAApD;AAQA,OAAO,MAAM,qBAAqB,GAAG,CAAC,KAAA,GAA+B,EAAhC,KAA8D;AAClG,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,WAAO,EACN,GAAG,mBADG;AAEN,MAAA,KAAK,EAAE;AAFD,KAAP;AAIA;;AAED,MAAI,KAAK,CAAC,OAAN,IAAiB,CAAC,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,OAApB,CAAtB,EAAoD;AACnD,UAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACA;;AAED,MAAI,KAAK,CAAC,WAAN,IAAqB,CAAC,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,WAApB,CAA1B,EAA4D;AAC3D,UAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACA;;AAED,SAAO,EACN,GAAG,mBADG;AAEN,OAAG,KAFG;AAGN,IAAA,gBAAgB,EAAE;AAHZ,GAAP;AAKA,CArBM","sourceRoot":"","sourcesContent":["import { requestMethods } from '../core/constants.js';\nexport const normalizeRequestMethod = (input) => requestMethods.includes(input) ? input.toUpperCase() : input;\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\nconst retryAfterStatusCodes = [413, 429, 503];\nconst defaultRetryOptions = {\n    limit: 2,\n    methods: retryMethods,\n    statusCodes: retryStatusCodes,\n    afterStatusCodes: retryAfterStatusCodes,\n    maxRetryAfter: Number.POSITIVE_INFINITY\n};\nexport const normalizeRetryOptions = (retry = {}) => {\n    if (typeof retry === 'number') {\n        return {\n            ...defaultRetryOptions,\n            limit: retry\n        };\n    }\n    if (retry.methods && !Array.isArray(retry.methods)) {\n        throw new Error('retry.methods must be an array');\n    }\n    if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n        throw new Error('retry.statusCodes must be an array');\n    }\n    return {\n        ...defaultRetryOptions,\n        ...retry,\n        afterStatusCodes: retryAfterStatusCodes\n    };\n};\n//# sourceMappingURL=normalize.js.map"]},"metadata":{},"sourceType":"module"}