{"ast":null,"code":"/*! MIT License © Sindre Sorhus */\nimport { Ky } from './core/Ky.js';\nimport { requestMethods, stop } from './core/constants.js';\nimport { validateAndMerge } from './utils/merge.js';\n\nconst createInstance = defaults => {\n  // eslint-disable-next-line @typescript-eslint/promise-function-async\n  const ky = (input, options) => Ky.create(input, validateAndMerge(defaults, options));\n\n  for (const method of requestMethods) {\n    // @ts-expect-error not sure how to properly type this!\n    // eslint-disable-next-line @typescript-eslint/promise-function-async\n    ky[method] = (input, options) => Ky.create(input, validateAndMerge(defaults, options, {\n      method\n    }));\n  }\n\n  ky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\n  ky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\n  ky.stop = stop;\n  return ky;\n};\n\nconst ky = createInstance();\nexport default ky;\nexport { HTTPError } from './errors/HTTPError.js';\nexport { TimeoutError } from './errors/TimeoutError.js';","map":{"version":3,"sources":["../source/index.ts"],"names":[],"mappings":"AAAA;AAEA,SAAQ,EAAR,QAAiB,cAAjB;AACA,SAAQ,cAAR,EAAwB,IAAxB,QAAmC,qBAAnC;AAGA,SAAQ,gBAAR,QAA+B,kBAA/B;;AAEA,MAAM,cAAc,GAAI,QAAD,IAA6C;AACnE;AACA,QAAM,EAAE,GAAG,CAAC,KAAD,EAAe,OAAf,KAAqC,EAAE,CAAC,MAAH,CAAU,KAAV,EAAiB,gBAAgB,CAAC,QAAD,EAAW,OAAX,CAAjC,CAAhD;;AAEA,OAAK,MAAM,MAAX,IAAqB,cAArB,EAAqC;AACpC;AACA;AACA,IAAA,EAAE,CAAC,MAAD,CAAF,GAAa,CAAC,KAAD,EAAe,OAAf,KAAoC,EAAE,CAAC,MAAH,CAAU,KAAV,EAAiB,gBAAgB,CAAC,QAAD,EAAW,OAAX,EAAoB;AAAC,MAAA;AAAD,KAApB,CAAjC,CAAjD;AACA;;AAED,EAAA,EAAE,CAAC,MAAH,GAAa,WAAD,IAAoC,cAAc,CAAC,gBAAgB,CAAC,WAAD,CAAjB,CAA9D;;AACA,EAAA,EAAE,CAAC,MAAH,GAAa,WAAD,IAAoC,cAAc,CAAC,gBAAgB,CAAC,QAAD,EAAW,WAAX,CAAjB,CAA9D;;AACA,EAAA,EAAE,CAAC,IAAH,GAAU,IAAV;AAEA,SAAO,EAAP;AACA,CAfD;;AAiBA,MAAM,EAAE,GAAG,cAAc,EAAzB;AAEA,eAAe,EAAf;AAkBA,SAAQ,SAAR,QAAwB,uBAAxB;AACA,SAAQ,YAAR,QAA2B,0BAA3B","sourceRoot":"","sourcesContent":["/*! MIT License © Sindre Sorhus */\nimport { Ky } from './core/Ky.js';\nimport { requestMethods, stop } from './core/constants.js';\nimport { validateAndMerge } from './utils/merge.js';\nconst createInstance = (defaults) => {\n    // eslint-disable-next-line @typescript-eslint/promise-function-async\n    const ky = (input, options) => Ky.create(input, validateAndMerge(defaults, options));\n    for (const method of requestMethods) {\n        // @ts-expect-error not sure how to properly type this!\n        // eslint-disable-next-line @typescript-eslint/promise-function-async\n        ky[method] = (input, options) => Ky.create(input, validateAndMerge(defaults, options, { method }));\n    }\n    ky.create = (newDefaults) => createInstance(validateAndMerge(newDefaults));\n    ky.extend = (newDefaults) => createInstance(validateAndMerge(defaults, newDefaults));\n    ky.stop = stop;\n    return ky;\n};\nconst ky = createInstance();\nexport default ky;\nexport { HTTPError } from './errors/HTTPError.js';\nexport { TimeoutError } from './errors/TimeoutError.js';\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}